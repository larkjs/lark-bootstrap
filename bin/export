#!/usr/bin/env node
'use strict'

const path  = require('path');
const fs    = require('fs');
const chalk = require('chalk');
const cp    = require('child_process');

function exec (command) {
    //console.log('exec: ' + command); 
    return cp.execSync.apply(cp, arguments);
}

let pkg    = require('../package.json');
const NAME  = pkg.name
const NOT_BUILD = ['node_modules', 'package.json', 'loader.js', 'release'];

let syntax = 'nodev5';
if (process.argv.indexOf('es5') >= 0) {
    syntax = 'es5';
}

if ('string' !== typeof NAME || NAME.match(new RegExp("^" + syntax + "\."))) {
    console.log("Project name must not start with " + syntax + ".");
}

let exportPath = '../' + syntax + '.' + NAME;
if (process.argv.indexOf('release') >= 0) {
    exportPath = 'release/' + syntax;
}

let CWD = process.cwd();

let appPath = CWD.split('/');
let index = appPath.indexOf(NAME);

if (-1 === index) {
    console.log(chalk.red('Error!') + ' ' + chalk.yellow('You should run build under ' + NAME + ' directory!'));
}

appPath = appPath.slice(0, index + 1).join('/');

let toPath = appPath + '/' + exportPath;

function removeBabel (obj) {
    if (Array.isArray(obj)) {
        obj = obj.filter(item => {
            if ((/babel/i).test(item)) {
                return false;
            }
            item = removeBabel(item);
            return true;
        });
    }
    else if (obj instanceof Object) {
        for (var name in obj) {
            if ((/babel/i).test(name)) {
                delete obj[name];
            }
            else {
                obj[name] = removeBabel(obj[name]);
            }
        }
    }
    return obj;
}

pkg = removeBabel(pkg);

console.log("Starting to build " + syntax + " ...");
exec("mkdir -p " + toPath);
exec('cp .babelrc_' + syntax + ' .babelrc');
fs.readdirSync(appPath).forEach((fileName) => {
    if (fileName[0] === '.' || NOT_BUILD.indexOf(fileName) >= 0) return;
    exec("cp -r " + appPath + '/' + fileName + ' ' + toPath + '/');
    let stat = fs.statSync(appPath + '/' + fileName);
    if (stat.isDirectory()) {
        exec(appPath + '/node_modules/.bin/babel ' + appPath + '/' + fileName + ' -d ' + toPath + '/' + fileName);
    }
    else if (stat.isFile() && path.extname(appPath + '/' + fileName) === '.js') {
        exec(appPath + '/node_modules/.bin/babel ' + appPath + '/' + fileName + ' -o ' + toPath + '/' + fileName);
    }
});
exec("rm -f " + toPath + "/bin/export " + toPath + "/bin/relase");
exec("rm " + appPath + "/.babelrc");
pkg.main = 'index.js';
if (pkg['version_' + syntax]) {
    pkg.version = pkg['version_' + syntax];
}
if (pkg['dependencies_' + syntax]) {
    pkg['dependencies'] = extend(true, pkg['dependencies'] || {}, pkg['dependencies_' + syntax]);
}
delete pkg['version_es5'];
delete pkg['version_nodev5'];
let node_modules_path = './node_modules';
if (process.argv.indexOf('release') >= 0) {
    exec("cd " + toPath + " && rm -rf node_modules && ln -s ../../node_modules node_modules");
}
pkg.scripts.test = "NODE_ENV=testing " + node_modules_path + "/.bin/mocha --require should test/";
delete pkg.scripts._test;
delete pkg.scripts.test_es5;
if (syntax === 'es5') {
    pkg.engines = {
        node: '>= 0.11.14',
    }
    pkg.scripts.test = "NODE_ENV=testing " + node_modules_path + "/.bin/mocha --harmony --require should test/";
}
fs.writeFileSync(toPath + '/package.json', JSON.stringify(pkg, null, 4));
console.log("Done!");

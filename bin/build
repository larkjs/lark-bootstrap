#!/usr/bin/env node
'use strict'

let pkg    = require('../package.json');
const NAME  = pkg.name
const NOT_BUILD = ['node_modules', 'package.json'];

if ('string' !== typeof NAME || NAME.match(/^nodev5\./)) {
    console.log("Project name must not start with nodev5.");
}

const path  = require('path');
const fs    = require('fs');
const chalk = require('chalk');
const exec  = require('child_process').execSync;

let CWD = process.cwd();

let appPath = CWD.split('/');
let index = appPath.indexOf(NAME);

if (-1 === index) {
    console.log(chalk.red('Error!') + ' ' + chalk.yellow('You should run build under ' + NAME + ' directory!'));
}

appPath = appPath.slice(0, index + 1).join('/');

let toPath = appPath + '/../nodev5.' + NAME;
pkg.version = pkg['version-node-v5'];
delete pkg['version-node-v5'];

function removeBabel (obj) {
    if (Array.isArray(obj)) {
        obj = obj.filter(item => {
            if ((/babel/i).test(item)) {
                return false;
            }
            item = removeBabel(item);
            return true;
        });
    }
    else if (obj instanceof Object) {
        for (var name in obj) {
            if ((/babel/i).test(name)) {
                delete obj[name];
            }
            else {
                obj[name] = removeBabel(obj[name]);
            }
        }
    }
    return obj;
}

pkg = removeBabel(pkg);

console.log("Starting to build ...");
exec("mkdir -p " + toPath);
fs.readdirSync(appPath).forEach((fileName) => {
    if (fileName[0] === '.' || NOT_BUILD.indexOf(fileName) >= 0) return;
    exec("cp -r " + appPath + '/' + fileName + ' ' + toPath + '/');
});
exec(appPath + '/node_modules/.bin/babel --ignore node_modules ' + appPath + ' -d ' + toPath);
exec("rm " + toPath + "/bin/build");
fs.writeFileSync(toPath + '/package.json', JSON.stringify(pkg, null, 4));
console.log("Done!");
